package rest

import (
        "fmt"
	"encoding/json"
)

type validators struct {
	Height  string  `json:"height"`

        Result  []struct {
		OperAddr		string	`json:"operator_address"`
		ConsPubkey		string	`json:"consensus_pubkey"`
		Jailed				bool	`json:"jailed"`
		Status				int	`json:"status"`
		Tokens				string	`json:"tokens"`
		DelegatorShares		string	`json:"delegator_shares"`
		Description struct {
			Moniker			string	`json:"moniker"`
			Identity		string	`json:"identity"`
			Website			string	`json:"website"`
			Details			string	`json:"details"`
		}
		UnbondingHeight		string	`json:"unbonding_height"`
		UnbondingTime			string	`json:"unbonding_time"`
		Commission struct {
			CommissionRates struct {
				Rate			string	`json:"rate"`
				MaxRate		string	`json:"max_rate"`
				MaxChangeRate		string	`json:"max_change_rate"`
			}
			UpdateTime		string	`json:"update_time"`
		}
		MinSelfDelegation		string	`json:"min_self_delegation"`
	}
}


func getValidators() map[string][]string {

	var v validators
	var vResult map[string][]string = make(map[string][]string)

	res := runRESTCommand("/staking/validators")
	json.Unmarshal(res, &v)

	for _, value := range v.Result {
		vResult[value.OperAddr] = []string{value.Description.Moniker,
								value.ConsPubkey,
								fmt.Sprint(value.Jailed),
								value.Tokens,
								value.DelegatorShares,
								value.Commission.CommissionRates.Rate,
								value.Commission.CommissionRates.MaxRate,
								value.Commission.CommissionRates.MaxChangeRate,
								value.Commission.UpdateTime,
								value.MinSelfDelegation,
								value.UnbondingHeight,
								value.UnbondingTime,
							}
	}

	return  vResult
}

